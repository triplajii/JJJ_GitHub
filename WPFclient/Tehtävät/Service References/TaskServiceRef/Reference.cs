//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.18034
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Tehtävät.TaskServiceRef {
    using System.Runtime.Serialization;
    using System;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Task.TodoTask", Namespace="http://schemas.datacontract.org/2004/07/TaskService")]
    [System.SerializableAttribute()]
    public partial class TaskTodoTask : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string guidField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string taskField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string guid {
            get {
                return this.guidField;
            }
            set {
                if ((object.ReferenceEquals(this.guidField, value) != true)) {
                    this.guidField = value;
                    this.RaisePropertyChanged("guid");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string task {
            get {
                return this.taskField;
            }
            set {
                if ((object.ReferenceEquals(this.taskField, value) != true)) {
                    this.taskField = value;
                    this.RaisePropertyChanged("task");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="TaskServiceRef.ITask")]
    public interface ITask {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITask/AddTask", ReplyAction="http://tempuri.org/ITask/AddTaskResponse")]
        string AddTask(string task);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITask/AddTask", ReplyAction="http://tempuri.org/ITask/AddTaskResponse")]
        System.Threading.Tasks.Task<string> AddTaskAsync(string task);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITask/GetAllTasks", ReplyAction="http://tempuri.org/ITask/GetAllTasksResponse")]
        Tehtävät.TaskServiceRef.TaskTodoTask[] GetAllTasks();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITask/GetAllTasks", ReplyAction="http://tempuri.org/ITask/GetAllTasksResponse")]
        System.Threading.Tasks.Task<Tehtävät.TaskServiceRef.TaskTodoTask[]> GetAllTasksAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITask/DeleteTask", ReplyAction="http://tempuri.org/ITask/DeleteTaskResponse")]
        void DeleteTask(string guid);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITask/DeleteTask", ReplyAction="http://tempuri.org/ITask/DeleteTaskResponse")]
        System.Threading.Tasks.Task DeleteTaskAsync(string guid);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface ITaskChannel : Tehtävät.TaskServiceRef.ITask, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class TaskClient : System.ServiceModel.ClientBase<Tehtävät.TaskServiceRef.ITask>, Tehtävät.TaskServiceRef.ITask {
        
        public TaskClient() {
        }
        
        public TaskClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public TaskClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public TaskClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public TaskClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public string AddTask(string task) {
            return base.Channel.AddTask(task);
        }
        
        public System.Threading.Tasks.Task<string> AddTaskAsync(string task) {
            return base.Channel.AddTaskAsync(task);
        }
        
        public Tehtävät.TaskServiceRef.TaskTodoTask[] GetAllTasks() {
            return base.Channel.GetAllTasks();
        }
        
        public System.Threading.Tasks.Task<Tehtävät.TaskServiceRef.TaskTodoTask[]> GetAllTasksAsync() {
            return base.Channel.GetAllTasksAsync();
        }
        
        public void DeleteTask(string guid) {
            base.Channel.DeleteTask(guid);
        }
        
        public System.Threading.Tasks.Task DeleteTaskAsync(string guid) {
            return base.Channel.DeleteTaskAsync(guid);
        }
    }
}
